#ifndef ARRAYS_H
#define ARRAYS_H

#include "listex.gh"

fixpoint bool int_within_limits(int x) { return INT_MIN <= x && x <= INT_MAX; }

lemma void ints_limits(int *pxs);
    requires [?f]ints(pxs, ?N, ?xs) &*& (uintptr_t)pxs <= ptr_provenance_max_addr(((pointer)pxs).provenance);
    ensures [f]ints(pxs, N, xs) &*& (uintptr_t)(pxs + N) <= ptr_provenance_max_addr(((pointer)pxs).provenance) &*& forall(xs, int_within_limits) == true;

lemma void ints_split(int *array, int offset);
    requires [?f]ints(array, ?N, ?as) &*& 0 <= offset &*& offset <= N;
    ensures [f]ints(array, offset, take(offset, as)) &*& [f]ints(array + offset, N - offset, drop(offset, as)) &*& as == append(take(offset, as), drop(offset, as));

lemma void ints_join(int *a);
    requires [?f]ints(a, ?M, ?as) &*& [f]ints(a + M, ?N, ?bs);
    ensures [f]ints(a, M + N, append(as, bs));

lemma void ints_unseparate_same(int *array, list<int> xs);
    requires ints(array, ?M, take(M, xs)) &*& integer(array + M, head(drop(M, xs))) &*& ints(array + M + 1, ?N, tail(drop(M, xs))) &*& length(xs) == M + N + 1;
    ensures ints(array, M + N + 1, xs) &*& head(drop(M, xs)) == nth(M, xs);

lemma void ints_unseparate(int *array, int i, list<int> xs);
    requires ints(array, i, take(i, xs)) &*& integer(array + i, ?y) &*& ints(array + i + 1, length(xs) - i - 1, tail(drop(i, xs)));
    ensures ints(array, length(xs), update(i, y, xs));

#endif