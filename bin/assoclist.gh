#ifndef ASSOCLIST_H
#define ASSOCLIST_H

fixpoint list<t1> keys<t1, t2>(list<pair<t1, t2> > map) {
  switch(map) {
    case nil: return nil;
    case cons(h, t): return cons(fst(h), keys(t));
  }
}

fixpoint list<t2> values<t1, t2>(list<pair<t1, t2> > map) {
  switch(map) {
    case nil: return nil;
    case cons(h, t): return cons(snd(h), values(t));
  }
}

fixpoint t2 assoc<t1, t2>(t1 key, list<pair<t1, t2> > as) {
  switch(as) {
    case nil: return default_value<t2>;
    case cons(h, t):
      return switch(h) {
        case pair(key0, value0):
         return key == key0 ? value0 : assoc(key, t);
      };
  }
}

fixpoint list<pair<t1, t2> > remove_assoc<t1, t2>(t1 key, list<pair<t1, t2> > map) {
  switch(map) {
    case nil: return nil;
    case cons(h, t): return switch(h) { case pair(k, v): return k == key ? t : cons(h, remove_assoc(key, t)); };
  }
}

fixpoint list<pair<t1, t2> > update_entry<t1, t2>(t1 key, fixpoint(t2, t2) f, list<pair<t1, t2> > map) {
  switch(map) {
    case nil: return nil;
    case cons(h, t):
      return switch(h) {
        case pair(key0, value0):
         return key == key0 ? cons(pair(key0, f(value0)), t) : cons(h, update_entry(key, f, t));
      };
  }
}

fixpoint bool mem_assoc<t1, t2>(list<pair<t1, t2> > as, t1 key) {
  switch(as) {
    case nil: return false;
    case cons(h, t):
      return switch(h) {
        case pair(key0, value0):
         return key == key0 ? true : mem_assoc(t, key);
      };
  }
}

lemma_auto(length(keys(map))) void length_keys<t1, t2>(list<pair<t1, t2> > map);
  requires true;
  ensures length(keys(map)) == length(map);
  
lemma_auto(length(values(map))) void length_values<t1, t2>(list<pair<t1, t2> > map);
  requires true;
  ensures length(values(map)) == length(map);

lemma_auto(take(i, values(map))) void take_values<t1, t2>(int i, list<pair<t1, t2> > map);
  requires 0 <= i && i <= length(map);
  ensures take(i, values(map)) == values(take(i, map));
  
lemma void take_update_entry<t1, t2>(t1 key, fixpoint(t2, t2) f, list<pair<t1, t2> > map, int i);
  requires 0 <=i &*& i <= length(map);
  ensures update_entry(key, f, take(i, map)) == take(i, update_entry(key, f, map));

lemma_auto(assoc(key, update_entry(key, f, map))) void assoc_update_entry<t1, t2>(t1 key, fixpoint(t2, t2) f, list<pair<t1, t2> > map);
  requires mem(key, keys(map)) == true;
  ensures assoc(key, update_entry(key, f, map)) == f(assoc(key, map));
  
lemma void take_assoc<t1, t2>(int n, t1 key, list<pair<t1, t2> > map);
  requires mem(key, keys(take(n, map))) == true;
  ensures assoc(key, take(n, map)) == assoc(key, map);

lemma_auto(keys(update_entry(key, f, map))) void update_entry_preserves_keys<t1, t2>(t1 key, fixpoint(t2, t2) f, list<pair<t1, t2> > map);
  requires true;
  ensures keys(update_entry(key, f, map)) == keys(map);

lemma void append_update_entry<t1, t2>(t1 key, fixpoint(t2, t2) f, list<pair<t1, t2> > map1, list<pair<t1, t2> > map2);
  requires ! mem(key, keys(map1));
  ensures append(map1, update_entry(key, f, map2)) == update_entry(key, f, append(map1, map2));

lemma_auto(assoc(otherkey, update_entry(key, f, map))) void update_entry_preserves_other_values<t1, t2>(t1 otherkey, t1 key, fixpoint(t2, t2) f, list<pair<t1, t2> > map);
  requires key != otherkey;
  ensures assoc(otherkey, update_entry(key, f, map)) == assoc(otherkey, map);

lemma void mem_keys<t1, t2>(t1 key, t2 value, list<pair<t1, t2> > map);
  requires mem(pair(key, value), map) == true;
  ensures mem(key, keys(map)) == true;
  
lemma void mem_values<t1, t2>(t1 key, t2 value, list<pair<t1, t2> > map);
  requires mem(pair(key, value), map) == true;
  ensures mem(value, values(map)) == true;

lemma_auto(keys(update_entry(key, f, map))) void keys_update_entry<t1, t2>(t1 key, fixpoint(t2, t2) f, list<pair<t1, t2> > map);
  requires true;
  ensures keys(update_entry(key, f, map)) == keys(map);

lemma_auto(length(update_entry(key, f, map))) void length_update_entry<t1, t2>(t1 key, fixpoint(t2, t2) f, list<pair<t1, t2> > map);
  requires true;
  ensures length(update_entry(key, f, map)) == length(map);
  
lemma void distinct_keys_implies_distinct_entries<t1, t2>(list<pair<t1, t2> > map);
  requires distinct(keys(map)) == true;
  ensures distinct(map) == true;
  
lemma void nth_values<t1, t2>(int i, list<pair<t1, t2> > map);
  requires 0 <= i && i < length(map);
  ensures nth(i, values(map)) == snd(nth(i, map));
  
lemma void append_keys<t1, t2>(list<pair<t1, t2> > map1, list<pair<t1, t2> > map2);
  requires true;
  ensures keys(append(map1, map2)) == append(keys(map1), keys(map2));
  
lemma void append_values<t1, t2>(list<pair<t1, t2> > map1, list<pair<t1, t2> > map2);
  requires true;
  ensures values(append(map1, map2)) == append(values(map1), values(map2));

lemma void assoc_append<t1, t2>(t1 key, list<pair<t1, t2> > map1,  list<pair<t1, t2> > map2);
  requires !mem(key, keys(map1));
  ensures assoc(key, append(map1, map2)) == assoc(key, map2);
  
lemma void assoc_append_l<t1, t2>(t1 key, list<pair<t1, t2> > map1,  list<pair<t1, t2> > map2);
  requires mem(key, keys(map1)) == true;
  ensures assoc(key, append(map1, map2)) == assoc(key, map1);

lemma_auto void keys_remove_assoc<t1, t2>(t1 key, list<pair<t1, t2> > map);
  requires true;
  ensures keys(remove_assoc(key, map)) == remove(key, keys(map));

lemma void remove_assoc_preserves_other_entries<t1, t2>(t1 key, t1 removed, list<pair<t1, t2> > map);
  requires mem(key, keys(map)) == true && key != removed;
  ensures mem(key, keys(remove_assoc(removed, map))) == true &*& assoc(key, remove_assoc(removed, map)) == assoc(key, map);

lemma_auto void length_remove_assoc<t1, t2>(t1 key, list<pair<t1, t2> > map);
  requires true;
  ensures length(remove_assoc(key, map)) == (mem(key, keys(map)) ? length(map) - 1 : length(map));

#endif
