#ifndef LISTEX_H
#define LISTEX_H

/*

Contents:
- lemmas about the definitions in list.h (in the same order)
- fixpoints max, fold_left, remove_all, ...

*/

lemma void take_plus_one<t>(int i, list<t> xs);
    requires 0 <= i &*& i < length(xs);
    ensures take(i + 1, xs) == append(take(i, xs), cons(nth(i, xs), nil));

lemma void take_append<t>(int n, list<t> xs, list<t> ys);
  requires 0 <= n && n <= length(xs);
  ensures take(n, append(xs, ys)) == take(n, xs);

lemma void distinct_mem_nth_take<t>(list<t> xs, int i);
    requires distinct(xs) == true &*& 0 <= i &*& i < length(xs);
    ensures !mem(nth(i, xs), take(i, xs));

lemma void nth_drop<t>(int n, int k, list<t> xs);
    requires 0 <= n &*& 0 <= k &*& n + k < length(xs);
    ensures nth(n, drop(k, xs)) == nth(n + k, xs);

lemma void neq_mem_remove<t>(t x, t y, list<t> xs);
    requires x != y;
    ensures mem(x, remove(y, xs)) == mem(x, xs);

lemma void mem_remove_mem<t>(t x, t y, list<t> xs);
    requires mem(x, remove(y, xs)) == true;
    ensures mem(x, xs) == true;

lemma void remove_commutes<t>(list<t> xs, t x, t y);
  requires true;
  ensures remove(x, remove(y, xs)) == remove(y, remove(x, xs));

lemma void distinct_mem_remove<t>(t x, list<t> xs);
    requires distinct(xs) == true;
    ensures !mem(x, remove(x, xs));

lemma void distinct_remove<t>(t x, list<t> xs);
    requires distinct(xs) == true;
    ensures distinct(remove(x, xs)) == true;

lemma void mem_nth_index_of<t>(t x, list<t> xs);
    requires mem(x, xs) == true;
    ensures nth(index_of(x, xs), xs) == x;

lemma void index_of_append_l<t>(t x, list<t> xs, list<t> ys);
    requires mem(x, xs) == true;
    ensures index_of(x, append(xs, ys)) == index_of(x, xs);

lemma_auto(index_of(x, append(xs, ys))) void index_of_append_r<t>(t x, list<t> xs, list<t> ys);
    requires !mem(x, xs);
    ensures index_of(x, append(xs, ys)) == length(xs) + index_of(x, ys);

lemma void nth_index_of<t>(int i, list<t> xs);
  requires distinct(xs) == true &*& 0 <= i && i < length(xs);
  ensures index_of(nth(i, xs), xs) == i;

lemma void map_append<a, b>(fixpoint(a, b) f, list<a> xs, list<a> ys);
    requires true;
    ensures map(f, append(xs, ys)) == append(map(f, xs), map(f, ys));

lemma void mem_map<a, b>(a x, list<a> xs, fixpoint(a, b) f);
    requires mem(x, xs) == true;
    ensures mem(f(x), map(f, xs)) == true;

lemma void forall_append<t>(list<t> xs, list<t> ys, fixpoint(t, bool) p);
    requires true;
    ensures forall(append(xs, ys), p) == (forall(xs, p) && forall(ys, p));

lemma void forall_mem<t>(t x, list<t> xs, fixpoint(t, bool) p);
    requires forall(xs, p) == true && mem(x, xs) == true;
    ensures p(x) == true;

lemma void forall_drop<t>(list<t> xs, fixpoint(t, bool) p, int i);
    requires forall(xs, p) == true;
    ensures forall(drop(i, xs), p) == true;


// --- End of lemmas about definitions from list.gh --- //

fixpoint int max(int x, list<int> xs) {
    switch (xs) {
        case nil: return x;
        case cons(x0, xs0): return x < x0 ? max(x0, xs0) : max(x, xs0);
    }
}

lemma void mem_max(int x, list<int> xs);
    requires true;
    ensures mem(max(x, xs), cons(x, xs)) == true;


fixpoint a fold_left<a, b>(a x0, fixpoint(a, b, a) f, list<b> xs) {
    switch (xs) {
        case nil: return x0;
        case cons(x, xs0): return fold_left(f(x0, x), f, xs0);
    }
}

lemma void fold_left_append<a, b>(a x0, fixpoint(a, b, a) f, list<b> xs1, list<b> xs2);
    requires true;
    ensures fold_left(x0, f, append(xs1, xs2)) == fold_left(fold_left(x0, f, xs1), f, xs2);

lemma_auto void append_drop_take<t>(list<t> vs, int i);
    requires 0 <= i && i <= length(vs);
    ensures append(take(i, vs), drop(i, vs)) == vs;

lemma void drop_append<t>(int n, list<t> xs, list<t> ys);
    requires length(xs) <= n;
    ensures drop(n, append(xs, ys)) == drop(n - length(xs), ys);

fixpoint list<t> remove_all<t>(list<t> xs, list<t> ys) {
    switch (xs) {
        case nil: return ys;
        case cons(x, xs0): return remove(x, remove_all(xs0, ys));
    }
}

lemma_auto void remove_all_nil<t>(list<t> xs);
    requires true;
    ensures remove_all(xs, nil) == nil;

lemma void remove_all_cons<t>(list<t> xs, t y, list<t> ys);
    requires !mem(y, xs);
    ensures remove_all(xs, cons(y, ys)) == cons(y, remove_all(xs, ys));

lemma void mem_remove_all<t>(t x, list<t> xs, list<t> ys);
    requires mem(x, ys) == true &*& !mem(x, xs);
    ensures mem(x, remove_all(xs, ys)) == true;

lemma void remove_remove_all<t>(t x, list<t> xs, list<t> ys);
    requires true;
    ensures remove(x, remove_all(xs, ys)) == remove_all(xs, remove(x, ys));

fixpoint list<t> filter<t>(fixpoint(t, bool) f, list<t> xs) {
    switch (xs) {
        case nil: return nil;
        case cons(x, xs0): return f(x) ? cons(x, filter(f, xs0)) : filter(f, xs0);
    }
}

fixpoint bool contains<t>(list<t> xs, t x) { return mem(x, xs); }

fixpoint bool subset<t>(list<t> xs, list<t> ys) { return forall(xs, (contains)(ys)); }

fixpoint list<t> intersection<t>(list<t> xs, list<t> ys) { return filter((contains)(xs), ys); }

lemma void subset_intersection<t>(list<t> xs, list<t> ys);
    requires subset(xs, ys) == true;
    ensures intersection(ys, xs) == xs;

lemma_auto void intersection_nil<t>(list<t> xs);
    requires true;
    ensures intersection(nil, xs) == nil;

lemma void subset_intersection_subset<t>(list<t> xs, list<t> ys);
    requires subset(xs, ys) == true;
    ensures subset(xs, intersection(xs, ys)) == true;

lemma void mem_intersection<t>(t x, list<t> xs, list<t> ys);
    requires true;
    ensures mem(x, intersection(xs, ys)) == (mem(x, xs) && mem(x, ys));

lemma_auto void subset_refl<t>(list<t> xs);
    requires true;
    ensures subset(xs, xs) == true;

lemma void mem_subset<t>(t x, list<t> xs, list<t> ys);
    requires mem(x, xs) == true &*& subset(xs, ys) == true;
    ensures mem(x, ys) == true;

lemma void subset_cons<t>(t x, list<t> xs);
    requires true;
    ensures subset(xs, cons(x, xs)) == true;

lemma void subset_trans<t>(list<t> xs, list<t> ys, list<t> zs);
    requires subset(xs, ys) == true &*& subset(ys, zs) == true;
    ensures subset(xs, zs) == true;

lemma void subset_remove_all<t>(list<t> xs, list<t> ys);
    requires true;
    ensures subset(remove_all(xs, ys), ys) == true;

lemma void not_mem_intersection<t>(t x, list<t> xs, list<t> ys);
    requires !mem(x, ys);
    ensures intersection(xs, ys) == intersection(remove(x, xs), ys);

lemma void remove_intersection<t>(t x, list<t> xs, list<t> ys);
    requires !mem(x, remove(x, intersection(xs, ys))) &*& !mem(x, remove(x, xs));
    ensures remove(x, intersection(xs, ys)) == intersection(remove(x, xs), ys);

lemma void foreach_remove_nth<t>(int n);
    requires [?f]foreach<t>(?xs, ?p) &*& 0 <= n &*& n < length(xs);
    ensures [f]foreach<t>(remove_nth(n, xs), p) &*& [f]p(nth(n, xs));

lemma void foreach_unremove_nth<t>(list<t> xs, int n);
    requires 0 <= n &*& n < length(xs) &*& [?f]foreach<t>(remove_nth(n, xs), ?p) &*& [f]p(nth(n, xs));
    ensures [f]foreach(xs, p);

predicate foreachp<t>(list<t> xs, predicate(t;) p;) =
    xs == nil ?
        emp
    :
        xs == cons(head(xs), tail(xs)) &*& p(head(xs)) &*& foreachp(tail(xs), p);

lemma void foreachp_remove<t>(t x, list<t> xs);
    requires foreachp(xs, ?p) &*& mem(x, xs) == true;
    ensures foreachp(remove(x, xs), p) &*& p(x);

lemma void foreachp_unremove<t>(t x, list<t> xs);
    requires foreachp(remove(x, xs), ?p) &*& mem(x, xs) == true &*& p(x);
    ensures foreachp(xs, p);

lemma void foreachp_remove_nth<t>(int n);
    requires foreachp<t>(?xs, ?p) &*& 0 <= n &*& n < length(xs);
    ensures foreachp<t>(remove_nth(n, xs), p) &*& p(nth(n, xs));

lemma void foreachp_unremove_nth<t>(list<t> xs, int n);
    requires foreachp<t>(remove_nth(n, xs), ?p) &*& 0 <= n &*& n < length(xs) &*& p(nth(n, xs));
    ensures foreachp<t>(xs, p);

lemma void foreachp_split<t>(list<t> xs, list<t> ys);
    requires foreachp<t>(append(xs, ys), ?p);
    ensures foreachp<t>(xs, p) &*& foreachp<t>(ys, p);

lemma void foreachp_join<t>(list<t> xs, list<t> ys);
    requires foreachp<t>(xs, ?p) &*& foreachp<t>(ys, p);
    ensures foreachp<t>(append(xs, ys), p);

#endif