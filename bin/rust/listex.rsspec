/*@

lem nth_drop<t>(n: i32, k: i32, xs: list<t>);
    req 0 <= n &*& 0 <= k &*& n + k < length(xs);
    ens nth(n, drop(k, xs)) == nth(n + k, xs);

fix fold_left<a, b>(x0: a, f: fix(a, b, a), xs: list<b>) -> a {
    match xs { 
        nil => x0,
        cons(x, xs0) => fold_left(f(x0, x), f, xs0)
    }
}

fix remove_all<t>(xs: list<t>, ys: list<t>) -> list<t> {
    match xs {
        nil => ys,
        cons(x, xs0) => remove(x, remove_all(xs0, ys))
    }
}

fix repeat<t>(n: nat, x: t) -> list<t> {
    match n {
        zero => nil,
        succ(n0) => cons(x, repeat(n0, x))
    }
}

@*/
