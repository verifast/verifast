include!{"prelude_core_core.rsspec"}
include!{"list.rsspec"}
include!{"listex.rsspec"}

/*@

lem assume(b: bool);
    req true;
    ens b;

pred exists<t>(x: t;) = true;
pred exists_np<t>(x: t) = true;

fix truncate_unsigned(x: i32, nbBits: i32) -> i32;
fix truncate_signed(x: i32, nbBits: i32) -> i32; // nbBits does not include the sign bit

fix abs(x: i32) -> i32 { if x < 0 { -x } else { x } }

fix is_power_of_2(n: i32) -> bool;

lem_auto is_power_of_2_lem();
    req true;
    ens is_power_of_2(1) && is_power_of_2(2) && is_power_of_2(4) && is_power_of_2(8) && is_power_of_2(16) && is_power_of_2(32);

lem size_align<T>();
    req true;
    ens std::mem::size_of::<T>() % std::mem::align_of::<T>() == 0;

lem mul_mono_l(x: i32, y: i32, z: i32);
    req x <= y &*& 0 <= z;
    ens x * z <= y * z;

lem div_rem(D: i32, d: i32);
    req d != 0;
    ens D == D / d * d + D % d &*& abs(D % d) < abs(d) &*& abs(D / d * d) <= abs(D);

lem div_rem_nonneg(D: i32, d: i32);
    req 0 <= D &*& 0 < d;
    ens D == D / d * d + D % d &*& 0 <= D / d &*& D / d <= D &*& 0 <= D % d &*& D % d < d;

lem div_rem_nonneg_unique(D: i32, d: i32, q: i32, r: i32);
    req 0 <= D &*& 0 <= r &*& r < d &*& D == d * q + r;
    ens D / d == q &*& D % d == r;

inductive pointer_provenance =
    pointer_provenance_ctor(i32); // Do not rely on this definition; it is subject to change.
inductive pointer = pointer_ctor(provenance: pointer_provenance, address: usize);

fix null_pointer_provenance() -> pointer_provenance;
fix null_pointer() -> pointer { pointer_ctor(null_pointer_provenance, 0) }

fix ptr_add(p: pointer, offset: i32) -> pointer {
    pointer_ctor(p.provenance, p.address + offset)
}

fix field_ptr_provenance(p: pointer, structTypeid: *_, fieldOffset: i32) -> pointer_provenance;
fix field_ptr_provenance_parent(pr: pointer_provenance, fieldOffset: i32) -> pointer;

lem_auto(field_ptr_provenance(p, structTypeid, fieldOffset)) field_ptr_provenance_injective(p: pointer, structTypeid: *_, fieldOffset: i32);
    req true;
    ens field_ptr_provenance_parent(field_ptr_provenance(p, structTypeid, fieldOffset), fieldOffset) == p;
    
fix field_ptr(p: pointer, structTypeid: *_, fieldOffset: i32) -> pointer {
    pointer_ctor(field_ptr_provenance(p, structTypeid, fieldOffset), p.address + fieldOffset)
}   

fix ptr_provenance_min_addr(pr: pointer_provenance) -> usize;
fix ptr_provenance_max_addr(pr: pointer_provenance) -> usize;

lem_auto ptr_provenance_min_addr_limits(pr: pointer_provenance);
    req true;
    ens 0 <= ptr_provenance_min_addr(pr);

lem_auto ptr_provenance_max_addr_limits(pr: pointer_provenance);
    req true;
    ens ptr_provenance_max_addr(pr) <= usize::MAX;

lem_auto null_pointer_provenance_min_addr();
    req true;
    ens ptr_provenance_min_addr(null_pointer_provenance) == 0;

lem_auto null_pointer_provenance_max_addr();
    req true;
    ens ptr_provenance_max_addr(null_pointer_provenance) == usize::MAX;

lem_auto field_ptr_provenance_min_addr(p: pointer, structTypeid: *_, fieldOffset: i32);
    req true;
    ens ptr_provenance_min_addr(p.provenance) <= ptr_provenance_min_addr(field_ptr_provenance(p, structTypeid, fieldOffset));

lem_auto field_ptr_provenance_max_addr(p: pointer, structTypeid: *_, fieldOffset: i32);
    req true;
    ens ptr_provenance_max_addr(field_ptr_provenance(p, structTypeid, fieldOffset)) <= ptr_provenance_max_addr(p.provenance);

lem ptr_provenance_min_addr_zero(pr: pointer_provenance);
    req ptr_provenance_min_addr(pr) <= 0;
    ens pr == null_pointer_provenance;

fix ptr_within_limits(p: pointer) -> bool { ptr_provenance_min_addr(p.provenance) <= p.address && p.address <= ptr_provenance_max_addr(p.provenance) }

fix pointer_within_limits(p: *_) -> bool { ptr_within_limits(p as pointer) }

fix object_pointer_within_limits(p: *_, size: i32) -> bool {
    pointer_within_limits(p) && pointer_within_limits(p + size) && p as usize != 0 && size >= 0
}

// When producing a field chunk, VeriFast produces a field_pointer_within_limits fact
// instead of a pointer_within_limits fact to avoid producing too many linear inequalities.
fix field_pointer_within_limits(p: *_, fieldOffset: i32) -> bool;

lem_auto(pointer_within_limits(field_ptr(p as pointer, structTypeid, fieldOffset) as *_)) field_pointer_within_limits_def(p: *_, structTypeid: *_, fieldOffset: i32);
    req true;
    ens field_pointer_within_limits(p, fieldOffset) == pointer_within_limits(field_ptr(p as pointer, structTypeid, fieldOffset) as *_);

lem_auto(field_pointer_within_limits(field_ptr(p as pointer, structTypeid, fieldOffset) as *_, 0)) first_field_pointer_within_limits_elim(p: *_, structTypeid: *_, fieldOffset: i32);
    req true;
    ens field_pointer_within_limits(field_ptr(p as pointer, structTypeid, fieldOffset) as *_, 0) == field_pointer_within_limits(p, fieldOffset);

lem_auto(ptr_within_limits(field_ptr(p, structTypeid, 0))) ptr_within_limits_field_ptr_0(p: pointer, structTypeid: *_);
    req true;
    ens ptr_within_limits(field_ptr(p, structTypeid, 0)) == ptr_within_limits(p);

fix has_type(p: *_, typeid_: *_) -> bool;

fix ptr_add_(p: pointer, offset: i32, elemTypeid: *_) -> pointer {
    ptr_add(p, offset * std::mem::size_of(elemTypeid))
}   

pred points_to_<t>(p: *t; v: option<t>);
pred points_to<t>(p: *t; v: t) = points_to_::<t>(p, some(v));

lem points_to_limits<T>(p: *T);
    req [?f]points_to(p, ?v);
    ens [f]points_to(p, v) &*& object_pointer_within_limits(p, std::mem::size_of::<T>()) == true;

pred array_<T>(p: *T, count: i32; values: list<option<T>>) =
    pointer_within_limits(p) == true &*&
    if count == 0 {
        values == nil
    } else {
        points_to_(p, ?value) &*& array_(p + 1, count - 1, ?values0) &*& values == cons(value, values0)
    };

pred array<T>(p: *T, count: i32; values: list<T>) =
    pointer_within_limits(p) == true &*&
    if count == 0 {
        values == nil
    } else {
        *p |-> ?value &*& array(p + 1, count - 1, ?values0) &*& values == cons(value, values0)
    };

lem_auto array__inv<T>();
    req [?f]array_::<T>(?p, ?count, ?elems);
    ens [f]array_::<T>(p, count, elems) &*& count == length(elems) &*& pointer_within_limits(p) == true &*& pointer_within_limits(p + count) == true;
    
lem_auto array_inv<T>();
    req [?f]array::<T>(?p, ?count, ?elems);
    ens [f]array::<T>(p, count, elems) &*& count == length(elems) &*& pointer_within_limits(p) == true &*& pointer_within_limits(p + count) == true;


lem array_split<T>(p: *T, offset: i32);
    req [?f]p[..?count] |-> ?vs &*& 0 <= offset &*& offset <= count;
    ens
        [f]p[..offset] |-> take(offset, vs) &*& [f]p[offset..count] |-> drop(offset, vs) &*&
        vs == append(take(offset, vs), drop(offset, vs));

lem array__split<T>(p: *T, offset: i32);
    req [?f]array_(p, ?count, ?vs) &*& 0 <= offset &*& offset <= count;
    ens
        [f]array_(p, offset, take(offset, vs)) &*&
        [f]array_(p + offset, count - offset, drop(offset, vs)) &*&
        vs == append(take(offset, vs), drop(offset, vs));

lem array_join<T>(p: *T);
    req
        [?f]array(p, ?count1, ?vs1) &*&
        [f]array(p + count1, ?count2, ?vs2);
    ens [f]array(p, count1 + count2, append(vs1, vs2));

lem array__join<T>(p: *T);
    req
        [?f]array_(p, ?count1, ?vs1) &*&
        [f]array_(p + count1, ?count2, ?vs2);
    ens [f]array_(p, count1 + count2, append(vs1, vs2));

lem array_to_array_<T>(p: *T);
    req [?f]array(p, ?count, ?vs);
    ens [f]array_(p, count, map(some, vs));

lem from_u8s_<T>(p: *T);
    req [?f](p as *u8)[..std::mem::size_of::<T>()] |-> _ &*& p as usize % std::mem::align_of::<T>() == 0;
    ens [f](*p |-> _);

lem to_u8s_<T>(p: *T);
    req [?f](*p |-> _);
    ens [f](p as *u8)[..std::mem::size_of::<T>()] |-> _ &*& p as usize % std::mem::align_of::<T>() == 0;

lem u8s__to_array_<T>(p: *T, size: i32);
    req [?f](p as *u8)[..size * std::mem::size_of::<T>()] |-> _ &*& p as usize % std::mem::align_of::<T>() == 0;
    ens [f]p[..size] |-> _;

lem array__to_u8s_<T>(p: *T, size: i32);
    req [?f]p[..size] |-> _;
    ens [f](p as *u8)[..size * std::mem::size_of::<T>()] |-> _ &*& p as usize % std::mem::align_of::<T>() == 0;

pred ghost_rec_perm(depth: i32;); // Permission to perform `depth` nested lemma function pointer calls.

pred ghost_rec_perm_top();
pred ghost_rec_perm_top_unweaken_token(depth: i32);
    
lem ghost_rec_perm_top_weaken(depth: i32);
    req ghost_rec_perm_top();
    ens ghost_rec_perm(depth) &*& ghost_rec_perm_top_unweaken_token(depth);
    
lem ghost_rec_perm_top_unweaken();
    req ghost_rec_perm_top_unweaken_token(?depth) &*& ghost_rec_perm(depth);
    ens ghost_rec_perm_top();

@*/
