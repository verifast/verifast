#ifndef LIFETIME_LOGIC_GH
#define LIFETIME_LOGIC_GH

#include "prelude_rust_core.gh"
#include "mask.gh"

fixpoint void *Nlfti() { return 0; }
fixpoint void *Nlrusti() { return (void *)1; }
fixpoint void *Nshri() { return (void *)2; }

fixpoint mask_t Nshr() { return MaskNs({Nlrusti, Nshri}); }
fixpoint mask_t MaskNshrSingle(void *l) { return MaskNs({Nlrusti, Nshri, l}); }
fixpoint mask_t Nlft() { return MaskSingle(Nlfti); }

predicate atomic_mask(mask_t mask);

inductive lifetime_t = lifetime_ctor(int id); // Type of lifetimes
abstract_type thread_id_t; // Type of thread IDs

fixpoint lifetime_t lifetime_intersection(lifetime_t k, lifetime_t k1);
fixpoint bool lifetime_inclusion(lifetime_t k, lifetime_t k1);

// LftL-incl
predicate close_lifetime_trade_token(real q1, lifetime_t k1, real q, lifetime_t k);

lemma void lifetime_token_trade(lifetime_t k, real q, lifetime_t k1);
    nonghost_callers_only
    requires lifetime_inclusion(k, k1) == true &*& [q]lifetime_token(k);
    ensures [?q1]lifetime_token(k1) &*& close_lifetime_trade_token(q1, k1, q, k);

lemma void lifetime_token_trade_back(real q1, lifetime_t k1);
    nonghost_callers_only
    requires close_lifetime_trade_token(q1, k1, ?q, ?k) &*& [q1]lifetime_token(k1);
    ensures [q]lifetime_token(k);

// LftL-incl-refl
lemma_auto void lifetime_inclusion_refl(lifetime_t k);
    requires true;
    ensures lifetime_inclusion(k, k) == true;

// LftL-incl-trans
lemma void lifetime_inclusion_trans(lifetime_t k, lifetime_t k1, lifetime_t k2);
    requires lifetime_inclusion(k, k1) && lifetime_inclusion(k1, k2);
    ensures lifetime_inclusion(k, k2) == true;

// LftL-incl-glb
lemma void lifetime_inclusion_glb(lifetime_t k, lifetime_t k1, lifetime_t k2);
    requires lifetime_inclusion(k, k1) && lifetime_inclusion(k, k2);
    ensures lifetime_inclusion(k, lifetime_intersection(k1, k2)) == true;

// lifetime intersection is multiset union
lemma void lifetime_intersection_symm(lifetime_t k, lifetime_t k1);
    requires true;
    ensures lifetime_intersection(k, k1) == lifetime_intersection(k1, k);

// LftL-incl-isect
lemma_auto(lifetime_intersection(k, k1)) void lifetime_inclusion_intersection(lifetime_t k, lifetime_t k1);
    requires true;
    ensures lifetime_inclusion(lifetime_intersection(k, k1), k) == true;

predicate lifetime_token(lifetime_t k;);
predicate lifetime_dead_token(lifetime_t k;);

lemma void lifetime_token_inv(lifetime_t k);
    requires [?q]lifetime_token(k);
    ensures [q]lifetime_token(k) &*& 0 < q &*& q <= 1;

// LftL-begin
lemma lifetime_t begin_lifetime();
    nonghost_callers_only
    requires true;
    ensures lifetime_token(result);

lemma void end_lifetime(lifetime_t k);
    nonghost_callers_only
    requires lifetime_token(k);
    ensures [_]lifetime_dead_token(k);

// LftL-tok-inter
lemma void close_lifetime_intersection_token(real q, lifetime_t k, lifetime_t k1);
    requires [q]lifetime_token(k) &*& [q]lifetime_token(k1);
    ensures [q]lifetime_token(lifetime_intersection(k, k1));

lemma void open_lifetime_intersection_token(real q, lifetime_t k, lifetime_t k1);
    requires [q]lifetime_token(lifetime_intersection(k, k1));
    ensures [q]lifetime_token(k) &*& [q]lifetime_token(k1);

// LftL-end-inter
lemma void close_lifetime_intersection_dead_token(lifetime_t k, lifetime_t k1);
    requires [_]lifetime_dead_token(k);
    ensures [_]lifetime_dead_token(lifetime_intersection(k, k1));

// Nonatomic token
predicate partial_thread_token(thread_id_t t, mask_t m);
predicate thread_token(thread_id_t t) = partial_thread_token(t, MaskTop);

// NAInv-tok-split
lemma void thread_token_split(thread_id_t t, mask_t m, mask_t to_split);
    requires partial_thread_token(t, m) &*& mask_le(to_split, m) == true;
    ensures partial_thread_token(t, mask_diff(m, to_split)) &*& partial_thread_token(t, to_split);

lemma void thread_token_merge(thread_id_t t, mask_t m, mask_t m1);
    requires partial_thread_token(t, m) &*& partial_thread_token(t, m1); // partial_thread_token(t, m) &*& partial_thread_token(t, m1) => mask_is_empty(mask_isec(m, m1))
    ensures partial_thread_token(t, mask_union(m, m1));

lemma void thread_token_replace_eq_mask(thread_id_t t, mask_t m, mask_t m1);
    requires partial_thread_token(t, m) &*& mask_eq(m, m1) == true;
    ensures partial_thread_token(t, m1);

// Full borrow
predicate full_borrow(lifetime_t k, predicate() P;);
predicate borrow_end_token(lifetime_t k, predicate() P);

// LftL-borrow
lemma void borrow(lifetime_t k, predicate() P);
    nonghost_callers_only
    requires P();
    ensures full_borrow(k, P) &*& borrow_end_token(k, P);

lemma void borrow_end(lifetime_t k, predicate() P);
    nonghost_callers_only
    requires [_]lifetime_dead_token(k) &*& borrow_end_token(k, P);
    ensures P();

// LftL-bor-shorten
lemma void full_borrow_mono(lifetime_t k, lifetime_t k1, predicate() P);
    requires lifetime_inclusion(k1, k) == true &*& full_borrow(k, P);
    ensures full_borrow(k1, P);

predicate close_full_borrow_token(predicate() P, real q, lifetime_t k); // accessor closing inheritance

// LftL-bor-acc
lemma void open_full_borrow(real q, lifetime_t k, predicate() P);
    nonghost_callers_only
    requires full_borrow(k, P) &*& [q]lifetime_token(k);
    ensures P() &*& close_full_borrow_token(P, q, k);

lemma void close_full_borrow(predicate() P);
    nonghost_callers_only
    requires close_full_borrow_token(P, ?q, ?k) &*& P();
    ensures full_borrow(k, P) &*& [q]lifetime_token(k);

// LftL-bor-acc-strong
predicate close_full_borrow_token_strong(lifetime_t k1, predicate() P, real q, lifetime_t k);

lemma lifetime_t open_full_borrow_strong(lifetime_t k, predicate() P, real q);
    nonghost_callers_only
    requires full_borrow(k, P) &*& [q]lifetime_token(k);
    ensures lifetime_inclusion(k, result) == true &*& P() &*& close_full_borrow_token_strong(result, P, q, k);

typedef lemma void full_borrow_convert_strong(predicate() Ctx, predicate() Q, lifetime_t k1, predicate() P)();
    requires Ctx() &*& Q() &*& [_]lifetime_dead_token(k1); // Empty mask
    ensures P();

lemma void close_full_borrow_strong(lifetime_t k1, predicate() P, predicate() Q);
    nonghost_callers_only
    requires close_full_borrow_token_strong(k1, P, ?q, ?k) &*& is_full_borrow_convert_strong(?f, ?Ctx, Q, k1, P) &*& Ctx() &*& Q();
    ensures full_borrow(k1, Q) &*& [q]lifetime_token(k) &*& is_full_borrow_convert_strong(f, Ctx, Q, k1, P);

// LftL-bor-unnest
predicate_ctor full_borrow_(lifetime_t k, predicate() P)(;) = full_borrow(k, P);

lemma void full_borrow_unnest(lifetime_t k1, lifetime_t k, predicate() P);
    nonghost_callers_only
    requires full_borrow(k1, full_borrow_(k, P));
    ensures full_borrow(lifetime_intersection(k1, k), P);

// LftL-reborrow
predicate end_reborrow_token(lifetime_t k1, lifetime_t k, predicate() P);

lemma void reborrow(lifetime_t k1, lifetime_t k, predicate() P);
    nonghost_callers_only
    requires lifetime_inclusion(k1, k) == true &*& full_borrow(k, P);
    ensures full_borrow(k1, P) &*& end_reborrow_token(k1, k, P);

lemma void end_reborrow(lifetime_t k1, lifetime_t k, predicate() P);
    nonghost_callers_only
    requires end_reborrow_token(k1, k, P) &*& [_]lifetime_dead_token(k1);
    ensures full_borrow(k, P);

// LftL-bor-fake
lemma void full_borrow_fake(lifetime_t k, predicate() P);
    nonghost_callers_only
    requires [_]lifetime_dead_token(k);
    ensures full_borrow(k, P);

typedef lemma void implies(predicate() P, predicate() P1)();
    requires P();
    ensures P1();

// Deriven trivially from LftL-bor-idx and LftL-idx-iff
lemma void full_borrow_implies(lifetime_t k, predicate() P, predicate() P1);
    requires full_borrow(k, P) &*& is_implies(?f, P, P1) &*& is_implies(?f1, P1, P);
    ensures full_borrow(k, P1) &*& is_implies(f, P, P1) &*& is_implies(f1, P1, P);

// LftL-bor-split
predicate_ctor sep(predicate() P, predicate() Q)() = P() &*& Q();

lemma void full_borrow_split(lifetime_t k, predicate() P, predicate() Q);
    nonghost_callers_only
    requires full_borrow(k, sep(P, Q));
    ensures full_borrow(k, P) &*& full_borrow(k, Q);

// Non-atomic persistent borrow
predicate nonatomic_borrow(lifetime_t k, thread_id_t t, mask_t m, predicate() P);

// LftL-bor-na
lemma void full_borrow_into_nonatomic_borrow(lifetime_t k, thread_id_t t, mask_t m, predicate() P);
    nonghost_callers_only
    requires full_borrow(k, P) &*& !mask_is_empty(m);
    ensures [_]nonatomic_borrow(k, t, m, P);

// LftL-na-shorten
lemma void nonatomic_borrow_mono(lifetime_t k, lifetime_t k1, thread_id_t t, mask_t m, predicate() P);
    requires [_]nonatomic_borrow(k, t, m, P) &*& lifetime_inclusion(k1, k) == true;
    ensures [_]nonatomic_borrow(k1, t, m, P);

lemma void nonatomic_borrow_mask_sup(lifetime_t k, thread_id_t t, mask_t m, mask_t m1, predicate() P);
    requires [_]nonatomic_borrow(k, t, m, P) &*& mask_le(m, m1) == true;
    ensures [_]nonatomic_borrow(k, t, m1, P);

predicate close_nonatomic_borrow_token(predicate() P, real q, lifetime_t k, thread_id_t t, mask_t m);

// LftL-na-acc
lemma void open_nonatomic_borrow(lifetime_t k, thread_id_t t, mask_t m, real q);
    nonghost_callers_only
    requires [_]nonatomic_borrow(k, t, m, ?P) &*& [q]lifetime_token(k) &*& partial_thread_token(t, m);
    ensures P() &*& close_nonatomic_borrow_token(P, q, k, t, m);

lemma void close_nonatomic_borrow();
    nonghost_callers_only
    requires close_nonatomic_borrow_token(?P, ?q, ?k, ?t, ?m) &*& P();
    ensures [q]lifetime_token(k) &*& partial_thread_token(t, m);

// Fractured borrows

/* The type of `P` in `frac_borrow` predicate causes VeriFast to allow creating fractured borrows only for precise predicates.
VeriFast checks the declaration of precise predicates so they satisfy the precondition of LftL-fract-acc.
Therefore the precondition does not need to be checked in the `requires` clause of the rule. */

predicate frac_borrow(lifetime_t k, predicate(;) P);

// LftL-bor-fracture
lemma void full_borrow_into_frac(lifetime_t k, predicate(;) P);
    nonghost_callers_only
    requires full_borrow(k, P);
    ensures [_]frac_borrow(k, P);

// LftL-fract-shorten
lemma void frac_borrow_mono(lifetime_t k, lifetime_t k1, predicate(;) P);
    requires [_]frac_borrow(k, P) &*& lifetime_inclusion(k1, k) == true;
    ensures [_]frac_borrow(k1, P);

predicate close_frac_borrow_token(real q_p, predicate(;) P, real q_lft, lifetime_t k);

// LftL-fract-acc
lemma void open_frac_borrow(lifetime_t k, predicate(;) P, real q_lft);
    nonghost_callers_only
    requires [_]frac_borrow(k, P) &*& [q_lft]lifetime_token(k);
    ensures [?q_p]P() &*& close_frac_borrow_token(q_p, P, q_lft, k);

lemma void close_frac_borrow(real q_p, predicate(;) P);
    nonghost_callers_only
    requires [q_p]P() &*& close_frac_borrow_token(q_p, P, ?q_lft, ?k);
    ensures [q_lft]lifetime_token(k);

// LftL-fract-acc-atomic
predicate close_frac_borrow_token_atomic(bool b, real q, predicate(;) P, lifetime_t k);

lemma bool open_frac_borrow_atomic(lifetime_t k, predicate(;) P);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& [_]frac_borrow(k, P);
    ensures atomic_mask(mask_diff(mask, Nlft)) &*& exists(?q) &*& (result ? [q]P() : [_]lifetime_dead_token(k)) &*& close_frac_borrow_token_atomic(result, q, P, k);

lemma void close_frac_borrow_atomic(predicate(;) P, lifetime_t k);
    requires atomic_mask(?mask) &*& close_frac_borrow_token_atomic(?b, ?q, P, k) &*& (b ? [q]P() : true);
    ensures atomic_mask(mask_union(mask, Nlft));

// frac_bor_iff in RustBelt repo
lemma void frac_borrow_implies(lifetime_t k, predicate(;) P, predicate(;) P1);
    requires frac_borrow(k, P) &*& is_implies(?f, P, P1) &*& is_implies(?f1, P1, P);
    ensures frac_borrow(k, P1) &*& is_implies(f, P, P1) &*& is_implies(f1, P1, P);

// Mask preserving view shifts - mask aware versions. See the documentation about Iris view shifts in general.h
// LftL-incl
lemma void lifetime_token_trade_m(lifetime_t k, real q, lifetime_t k1);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& lifetime_inclusion(k, k1) == true &*& [q]lifetime_token(k);
    ensures atomic_mask(mask) &*& [?q1]lifetime_token(k1) &*& close_lifetime_trade_token(q1, k1, q, k);

lemma void lifetime_token_trade_back_m(real q1, lifetime_t k1);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& close_lifetime_trade_token(q1, k1, ?q, ?k) &*& [q1]lifetime_token(k1);
    ensures atomic_mask(mask) &*& [q]lifetime_token(k);

// LftL-begin
lemma lifetime_t begin_lifetime_m();
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true;
    ensures atomic_mask(mask) &*& lifetime_token(result);

lemma void end_lifetime_m(lifetime_t k);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& lifetime_token(k);
    ensures atomic_mask(mask) &*& [_]lifetime_dead_token(k);

// LftL-borrow
lemma void borrow_m(lifetime_t k, predicate() P);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& P();
    ensures atomic_mask(mask) &*& full_borrow(k, P) &*& borrow_end_token(k, P);

lemma void borrow_end_m(lifetime_t k, predicate() P);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& [_]lifetime_dead_token(k) &*& borrow_end_token(k, P);
    ensures atomic_mask(mask) &*& P();

// LftL-bor-acc
lemma void open_full_borrow_m(real q, lifetime_t k, predicate() P);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& full_borrow(k, P) &*& [q]lifetime_token(k);
    ensures atomic_mask(mask) &*& P() &*& close_full_borrow_token(P, q, k);

lemma void close_full_borrow_m(predicate() P);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& close_full_borrow_token(P, ?q, ?k) &*& P();
    ensures atomic_mask(mask) &*& full_borrow(k, P) &*& [q]lifetime_token(k);

// LftL-bor-acc-strong
lemma lifetime_t open_full_borrow_strong_m(lifetime_t k, predicate() P, real q);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& full_borrow(k, P) &*& [q]lifetime_token(k);
    ensures atomic_mask(mask) &*& lifetime_inclusion(k, result) == true &*& P() &*& close_full_borrow_token_strong(result, P, q, k);

lemma void close_full_borrow_strong_m(lifetime_t k1, predicate() P, predicate() Q);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& close_full_borrow_token_strong(k1, P, ?q, ?k) &*& is_full_borrow_convert_strong(?f, ?Ctx, Q, k1, P) &*& Ctx() &*& Q();
    ensures atomic_mask(mask) &*& full_borrow(k1, Q) &*& [q]lifetime_token(k) &*& is_full_borrow_convert_strong(f, Ctx, Q, k1, P);

// LftL-bor-unnest
lemma void full_borrow_unnest_m(lifetime_t k1, lifetime_t k, predicate() P);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& full_borrow(k1, full_borrow_(k, P));
    ensures atomic_mask(mask) &*& full_borrow(lifetime_intersection(k1, k), P);

lemma void reborrow_m(lifetime_t k1, lifetime_t k, predicate() P);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& lifetime_inclusion(k1, k) == true &*& full_borrow(k, P);
    ensures atomic_mask(mask) &*& full_borrow(k1, P) &*& end_reborrow_token(k1, k, P);

lemma void end_reborrow_m(lifetime_t k1, lifetime_t k, predicate() P);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& end_reborrow_token(k1, k, P) &*& [_]lifetime_dead_token(k1);
    ensures atomic_mask(mask) &*& full_borrow(k, P);

// LftL-bor-fake
lemma void full_borrow_fake_m(lifetime_t k, predicate() P);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& [_]lifetime_dead_token(k);
    ensures atomic_mask(mask) &*& full_borrow(k, P);

// LftL-bor-split
lemma void full_borrow_split_m(lifetime_t k, predicate() P, predicate() Q);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& full_borrow(k, sep(P, Q));
    ensures atomic_mask(mask) &*& full_borrow(k, P) &*& full_borrow(k, Q);

// LftL-bor-na
lemma void full_borrow_into_nonatomic_borrow_m(lifetime_t k, thread_id_t t, mask_t m, predicate() P);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& full_borrow(k, P) &*& !mask_is_empty(m);
    ensures atomic_mask(mask) &*& [_]nonatomic_borrow(k, t, m, P);

// LftL-na-acc
lemma void open_nonatomic_borrow_m(lifetime_t k, thread_id_t t, mask_t m, real q);
    requires atomic_mask(?mask) &*& mask_le(mask_union(Nlft, m), mask) == true &*& [_]nonatomic_borrow(k, t, m, ?P) &*& [q]lifetime_token(k) &*& partial_thread_token(t, m);
    ensures atomic_mask(mask) &*& P() &*& close_nonatomic_borrow_token(P, q, k, t, m);

lemma void close_nonatomic_borrow_m();
    requires close_nonatomic_borrow_token(?P, ?q, ?k, ?t, ?m) &*& P() &*& atomic_mask(?mask) &*& mask_le(mask_union(Nlft, m), mask) == true;
    ensures [q]lifetime_token(k) &*& partial_thread_token(t, m) &*& atomic_mask(mask);

// LftL-bor-fracture
lemma void full_borrow_into_frac_m(lifetime_t k, predicate(;) P);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& full_borrow(k, P);
    ensures atomic_mask(mask) &*& [_]frac_borrow(k, P);

// LftL-fract-acc
lemma void open_frac_borrow_m(lifetime_t k, predicate(;) P, real q_lft);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& [_]frac_borrow(k, P) &*& [q_lft]lifetime_token(k);
    ensures atomic_mask(mask) &*& [?q_p]P() &*& close_frac_borrow_token(q_p, P, q_lft, k);

lemma void close_frac_borrow_m(real q_p, predicate(;) P);
    requires atomic_mask(?mask) &*& mask_le(Nlft, mask) == true &*& [q_p]P() &*& close_frac_borrow_token(q_p, P, ?q_lft, ?k);
    ensures atomic_mask(mask) &*& [q_lft]lifetime_token(k);

#endif
