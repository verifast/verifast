/*@

abstract_type type_info;

@*/

mod intrinsics {

    unsafe fn copy_nonoverlapping<T>(src: *mut T, dst: *mut T, count: usize);
    //@ req [?f]integers_(src as *mut u8, 1, false, count * std::mem::size_of::<T>(), ?vs) &*& integers__(dst as *mut u8, 1, false, count * std::mem::size_of::<T>(), _);
    //@ ens [f]integers_(src as *mut u8, 1, false, count * std::mem::size_of::<T>(), vs) &*& integers_(dst as *mut u8, 1, false, count * std::mem::size_of::<T>(), vs);

}

mod mem {

    fn drop<T>(value: T);
    //@ req thread_token(?t) &*& <T>.own(t, value);
    //@ ens thread_token(t);
    
}

mod ptr {

    unsafe fn drop_in_place<T>(to_drop: *mut T);
    //@ req thread_token(?t) &*& (<T>.full_borrow_content(t, to_drop))();
    //@ ens thread_token(t) &*& *to_drop |-> _;

}

mod alloc {

    impl Layout {

        fn from_size_align_unchecked(size: usize, align: usize) -> usize;
        //@ req align == 1 || align == 2 || align == 4 || align == 8 || align == 16;
        //@ ens result == size;

    }

    fn alloc(size: usize) -> *u8;
    //@ req 1 <= size;
    /*@
    ens
        if result == 0 {
            true
        } else {
            integers__(result, 1, false, size, _) &*& alloc_block(result, size) &*&
            object_pointer_within_limits(result, size) == true
        };
    @*/
    //@ terminates;
    
    fn realloc(buffer: *u8, old_size: usize, new_size: usize) -> *u8;
    //@ req integers_(buffer, 1, false, ?len, ?vs1) &*& integers__(buffer + len, 1, false, old_size - len, ?vs2) &*& alloc_block(buffer, old_size) &*& old_size <= new_size;
    /*@
    ens
        if result == 0 {
            integers_(buffer, 1, false, len, vs1) &*& integers__(buffer + len, 1, false, old_size - len, vs2) &*& alloc_block(buffer, old_size)
        } else {
            integers_(result, 1, false, len, vs1) &*& integers__(result + len, 1, false, old_size - len, vs2) &*&
            integers__(result + old_size, 1, false, new_size - old_size, _) &*& alloc_block(result, new_size)
        };
    @*/
    
    fn dealloc(p: *u8, size: usize);
    //@ req alloc_block(p, size) &*& integers__(p, 1, false, size, _);
    //@ ens true;
    //@ terminates;

    fn handle_alloc_error(layout: usize);
    //@ req true;
    //@ ens false;
    //@ terminates;
    
    struct Global;
    
}

mod process {
    fn abort();
    //@ req true;
    //@ ens false;
    //@ terminates;

    fn exit(code: i32);
    //@ req true;
    //@ ens false;
    //@ terminates;
}
//Todo @Nima: Edit Rust parser so it substitutes `!` type with std_empty_ union

mod result {

    enum Result<T, E> {
        Ok(T),
        Err(E),
    }
    
    //@ pred Result_own<T, E>(t: thread_id_t, v: Result<T, E>);
    
    impl<T, E> Result<T, E> {
    
        fn unwrap(self: Result<T, E>) -> T;
        //@ req thread_token(?t) &*& Result_own::<T, E>(t, self);
        //@ ens thread_token(t);
    
    }

}

mod vec {

    struct Vec<T, A>;
    
    //@ pred Vec<T, A>(self: Vec<T, A>, capacity: usize, elems: list<T>); // This predicate does *not* assert ownership of the elements.
    //@ pred Vec_minus_buffer<T, A>(self: Vec<T, A>, capacity: usize, len: usize, buffer: *T);
    
    /*@
    
    lem Vec_separate_buffer<T, A>(self: Vec<T, A>);
        req [?f]Vec::<T, A>(self, ?capacity, ?elems);
        ens [f]Vec_minus_buffer::<T, A>(self, capacity, length(elems), ?buffer) &*& [f]buffer[..length(elems)] |-> elems &*& [f]buffer[length(elems)..capacity] |-> _;
    
    lem Vec_unseparate_buffer<T, A>(self: Vec<T, A>);
        req [?f]Vec_minus_buffer::<T, A>(self, ?capacity, ?len, ?buffer) &*& [f]buffer[..len] |-> ?elems &*& [f]buffer[len..capacity] |-> _;
        ens [f]Vec::<T, A>(self, capacity, elems);
    
    lem Vec_to_own<T, A>(self: Vec<T, A>);
        req thread_token(?t) &*& Vec::<T, A>(self, ?capacity, ?elems) &*& foreach(elems, own::<T>(t));
        ens thread_token(t) &*& <Vec<T, A>>.own(t, self);
    
    @*/
    
    impl<T> Vec<T> {
    
        fn new() -> Vec<T, std::alloc::Global>;
        //@ req true;
        //@ ens Vec(result, _, []);
    
    }
    
    impl<T, A> Vec<T, A> {
    
        fn len(self: *Vec<T, A>) -> usize;
        //@ req [?f](*self |-> ?self_) &*& [f]Vec::<T, A>(self_, ?capacity, ?elems);
        //@ ens [f](*self |-> self_) &*& [f]Vec::<T, A>(self_, capacity, elems) &*& result == length(elems);
    
        fn push(self: *Vec<T, A>, elem: T);
        //@ req *self |-> ?self0 &*& Vec::<T, A>(self0, _, ?elems0);
        //@ ens *self |-> ?self1 &*& Vec::<T, A>(self1, _, append(elems0, [elem]));
        
        fn as_ptr(self: *Vec<T, A>) -> *T;
        //@ req [?f](*self |-> ?self_) &*& [f]Vec_minus_buffer::<T, A>(self_, ?capacity, ?len, ?buffer);
        //@ ens [f](*self |-> self_) &*& [f]Vec_minus_buffer::<T, A>(self_, capacity, len, buffer) &*& result == buffer;

    }
    
}

mod io {

    struct Error;
    
    type Result<T> = std::result::Result<T, Error>;
    
    trait Write {
    
        fn write(self: *Self, buf: &[u8]) -> Result<usize>;
        //@ req thread_token(?t) &*& *self |-> ?self0 &*& <Self>.own(t, self0) &*& [?f]integers_(buf.ptr, 1, false, buf.len, ?bs);
        //@ ens thread_token(t) &*& *self |-> ?self1 &*& <Self>.own(t, self1) &*& [f]integers_(buf.ptr, 1, false, buf.len, bs) &*& std::result::Result_own::<usize, Error>(t, result);
        
        fn flush(self: *Self) -> Result<()>;
        //@ req thread_token(?t) &*& *self |-> ?self0 &*& <Self>.own(t, self0);
        //@ ens thread_token(t) &*& *self |-> ?self1 &*& <Self>.own(t, self1);
        
    }

    struct Stdout;
    
    fn stdout() -> Stdout;
    //@ req thread_token(?t);
    //@ ens thread_token(t) &*& <Stdout>.own(t, result);

}