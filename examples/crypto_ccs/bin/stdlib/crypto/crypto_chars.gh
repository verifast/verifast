#ifndef CRYPTO_CHARS_GH
#define CRYPTO_CHARS_GH

#include "ccs.gh"

fixpoint bool col();

inductive crypto_chars_kind =
  | normal
  | secret
;

fixpoint crypto_chars_kind join_kinds(crypto_chars_kind k1,
                                      crypto_chars_kind k2)
{
  switch(k1)
  {
    case normal:
      return k2;
    case secret:
      return secret;
  }
}

predicate crypto_chars(crypto_chars_kind kind,
                       char *arr, int n; list<crypto_char> ccs);

predicate hide_crypto_chars(crypto_chars_kind kind,
                            char *buffer, int length, list<crypto_char> ccs) =
  crypto_chars(kind, buffer, length, ccs)
;

lemma void crypto_chars_to_chars(char *arr, int n);
  requires [?f]crypto_chars(?kind, arr, n, ?ccs) &*& col || kind == normal;
  ensures  [f]chars(arr, n, ?cs) &*& ccs == cs_to_ccs(cs);

lemma void chars_to_crypto_chars(char *arr, int n);
  requires [?f]chars(arr, n, ?cs);
  ensures  [f]crypto_chars(normal, arr, n, cs_to_ccs(cs));

lemma void chars_to_secret_crypto_chars(char *arr, int n);
  requires [?f]chars(arr, n, ?cs);
  ensures  [f]crypto_chars(secret, arr, n, cs_to_ccs(cs));

lemma_auto void crypto_chars_inv();
  requires [?f]crypto_chars(?kind, ?arr, ?count, ?ccs);
  ensures  [f]crypto_chars(kind, arr, count, ccs) &*& length(ccs) == count;

lemma_auto void crypto_chars_limits(char *arr);
  requires [?f]crypto_chars(?kind, arr, ?n, ?ccs) &*&
           true == ((char *)0 <= arr) &*& arr <= (char *)UINTPTR_MAX;
  ensures  [f]crypto_chars(kind, arr, n, ccs) &*&
           true == ((char *)0 <= arr) &*& arr + n <= (char *)UINTPTR_MAX;

lemma_auto void crypto_chars_distinct(char *arr1, char *arr2);
  requires crypto_chars(?kind1, arr1, ?count1, ?ccs1) &*&
           crypto_chars(?kind2, arr2, ?count2, ?ccs2);
  ensures  crypto_chars(kind1, arr1, count1, ccs1) &*&
           crypto_chars(kind2, arr2, count2, ccs2) &*&
           arr1 != arr2;

lemma void crypto_chars_split(char *arr, int offset);
  requires [?f]crypto_chars(?kind, arr, ?n, ?ccs) &*&
           0 <= offset &*& offset <= n;
  ensures  [f]crypto_chars(kind, arr, offset, ?ccs1) &*&
           [f]crypto_chars(kind, arr + offset, n - offset, ?ccs2) &*&
           ccs1 == take(offset, ccs) &*& ccs2 == drop(offset, ccs) &*&
           ccs == append(ccs1, ccs2);

lemma_auto void crypto_chars_join(char *arr);
  requires [?f]crypto_chars(?kind, arr, ?n, ?ccs) &*&
           [f]crypto_chars(kind, arr + n, ?n0, ?ccs0);
  ensures  [f]crypto_chars(kind, arr, n + n0, append(ccs, ccs0));

#endif
