#ifndef RANDOM_CRYPTO_CHARS_GH
#define RANDOM_CRYPTO_CHARS_GH

#include <crypto.gh>
#include "principals.gh"
#include "cryptogram.gh"

require_module decryption_mod;

predicate decryption_key_classifier(fixpoint(int, int, bool, bool) key_classifier);

lemma void decryption_init(fixpoint(int, int, bool, bool) key_classifier);
  requires module(decryption_mod, true);
  ensures  [_]decryption_key_classifier(key_classifier);

predicate decryption_garbage(bool symmetric, int principal, structure s,
                                    int p_key, int c_key, list<char> cs_out);

predicate decryption_pre(bool symmetric, bool garbage,
                         int principal, structure s, list<char> cs_in) =
  !garbage ?
    decryption_permission(principal)
  :
    decryption_garbage(symmetric, principal, s, _, _, ?cs_out) &*&
    exists(pair(?prefix, ?suffix)) &*&
    cs_out == append(prefix, append(cs_in, suffix))
;

predicate decryption_post(bool symmetric, bool garbage,
                          int principal, structure s,
                          int p_key, int c_key, list<char> cs_out) =
  !garbage ?
    decryption_permission(principal)
  :
    decryption_garbage(symmetric, principal, s, p_key, c_key, cs_out)
;

inductive structure =
  | known_value(int offset, list<char> cs_known)
  | cryptogram_with_payload(int offset, int length)
;

predicate has_structure(list<char> cs, structure s) =
  exists(pair(?prefix, ?suffix)) &*&
  switch(s)
  {
    //  ___________________ ________
    // |        |          |        |
    // | prefix | cs_known | suffix |
    // |________|__________|________|
    //
    case known_value(offset, cs_known):
      return cs == append(prefix, append(cs_known, suffix)) &*&
             length(cs_known) >= MINIMAL_STRING_SIZE &*&
             length(prefix) == offset;
    //  ______________________________ ________
    // |        |                     |        |
    // | prefix | F(prefix || suffix) | suffix |
    // |________|_____________________|________|
    //
    case cryptogram_with_payload(offset, length):
      return exists(?cg) &*& cg_payload(cg) == some(?cs_pay) &*&
             cs == append(prefix, append(chars_for_cg(cg), suffix)) &*&
             cs_pay == append(prefix, suffix) &*&
             length(cs_pay) >= MINIMAL_STRING_SIZE &*&
             length == length(chars_for_cg(cg)) &*&
             length >= MINIMAL_STRING_SIZE &*&
             length(prefix) == offset;
  }
;

lemma void decryption_garbage(char *arr, int n, structure s);
  requires [_]decryption_key_classifier(?key_classifier) &*&
           decryption_garbage(?sym, ?p, s, ?p_k, ?c_k, ?cs) &*&
           col || key_classifier(p_k, c_k, sym) ? true : [_]has_structure(cs, s);
  ensures  decryption_permission(p) &*&
           key_classifier(p_k, c_k, sym) ? true : true == col;

typedef lemma void public_key_classifier(predicate(cryptogram) pub,
                                         fixpoint(int, int, bool, bool) key_classifier,
                                         predicate() proof_pred)
                                        (cryptogram key, int p, int c, bool symmetric);
  requires  proof_pred() &*&
            [_]pub(key) &*&
            symmetric ?
              key == cg_symmetric_key(p, c)
            :
              key == cg_private_key(p, c);
  ensures   proof_pred() &*&
            col || true == key_classifier(p, c, symmetric);

#define DECRYPTION_PROOFS(PREFIX) \
  lemma void PREFIX##_public_key_classifier(cryptogram key, int p, int c, \
                                            bool symmetric) \
    requires [_]PREFIX##_pub(key) &*& \
             symmetric ? \
               key == cg_symmetric_key(p, c) \
             : \
               key == cg_private_key(p, c); \
    ensures  true == PREFIX##_public_key(p, c, symmetric); \
  { \
    open [_]PREFIX##_pub(key); \
  }

#define DECRYPTION_CONSTRAINTS(PREFIX) \
{ \
  produce_lemma_function_pointer_chunk(PREFIX##_public_key_classifier) : \
    public_key_classifier(PREFIX##_pub, PREFIX##_public_key, PREFIX##_proof_pred) \
                         (PREFIX##_key, PREFIX##_p, PREFIX##_c, \
                          PREFIX##_symmetric){ call(); }; \
}

#endif
