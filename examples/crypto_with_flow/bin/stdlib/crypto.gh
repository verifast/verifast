#ifndef CRYPTO_GH
#define CRYPTO_GH

#define MINIMAL_STRING_SIZE 10

predicate network_permission(int principal;);

fixpoint bool bad(int principal);

inductive cryptogram =
  | cg_nonce         (int principal, int count)
  | cg_symmetric_key (int principal, int count)
  | cg_public_key    (int principal, int count)
  | cg_private_key   (int principal, int count)
  | cg_hash          (list<char> payload)
  | cg_hmac          (int principal, int count, list<char> payload)
  | cg_encrypted     (int principal, int count, list<char> payload,
                      list<char> entropy)
  | cg_auth_encrypted(int principal, int count, list<char> payload,
                      list<char> entropy)
  | cg_asym_encrypted(int principal, int count, list<char> payload,
                      list<char> entropy)
  | cg_asym_signature(int principal, int count, list<char> payload,
                      list<char> entropy)
;

//The character representation of a cryptogram
fixpoint list<char> chars_for_cg(cryptogram cg);

//Is the cryptogram generated in this run?
fixpoint bool cg_is_generated(cryptogram cg);

//is true if a cryptographic collision occurs in a protocol run
fixpoint bool col();

inductive crypto_chars_kind =
  | normal
  | secret
;

fixpoint crypto_chars_kind join_kinds(crypto_chars_kind k1,
                                      crypto_chars_kind k2)
{
  switch(k1)
  {
    case normal:
      return k2;
    case secret:
      return secret;
  }
}

predicate crypto_chars(crypto_chars_kind kind,
                       char *arr, int n; list<char> cs);

lemma_auto void crypto_chars_to_chars(char *arr, int n);
  requires [?f]crypto_chars(?kind, arr, n, ?cs) &*& col || kind == normal;
  ensures  [f]chars(arr, n, cs);

lemma_auto void chars_to_crypto_chars(char *arr, int n);
  requires [?f]chars(arr, n, ?cs);
  ensures  [f]crypto_chars(normal, arr, n, cs);

lemma_auto void chars_to_secret_crypto_chars(char *arr, int n);
  requires [?f]chars(arr, n, ?cs);
  ensures  [f]crypto_chars(secret, arr, n, cs);

lemma_auto void crypto_chars_inv();
  requires [?f]crypto_chars(?kind, ?arr, ?count, ?cs);
  ensures  [f]crypto_chars(kind, arr, count, cs) &*& length(cs) == count;

lemma_auto void crypto_chars_limits(char *arr);
  requires [?f]crypto_chars(?kind, arr, ?n, ?cs) &*&
           true == ((char *)0 <= arr) &*& arr <= (char *)UINTPTR_MAX;
  ensures  [f]crypto_chars(kind, arr, n, cs) &*&
           true == ((char *)0 <= arr) &*& arr + n <= (char *)UINTPTR_MAX;

lemma_auto void crypto_chars_distinct(char *arr1, char *arr2);
  requires crypto_chars(?kind1, arr1, ?count1, ?cs1) &*&
           crypto_chars(?kind2, arr2, ?count2, ?cs2);
  ensures  crypto_chars(kind1, arr1, count1, cs1) &*&
           crypto_chars(kind2, arr2, count2, cs2) &*&
           arr1 != arr2;

lemma void crypto_chars_split(char *arr, int offset);
  requires [?f]crypto_chars(?kind, arr, ?n, ?cs) &*&
           0 <= offset &*& offset <= n;
  ensures  [f]crypto_chars(kind, arr, offset, ?cs1) &*&
           [f]crypto_chars(kind, arr + offset, n - offset, ?cs2) &*&
           cs1 == take(offset, cs) &*& cs2 == drop(offset, cs) &*&
           cs == append(cs1, cs2);

lemma_auto void crypto_chars_join(char *arr);
  requires [?f]crypto_chars(?kind, arr, ?n, ?cs) &*&
           [f]crypto_chars(kind, arr + n, ?n0, ?cs0);
  ensures  [f]crypto_chars(kind, arr, n + n0, append(cs, cs0));

#endif
