ifeq ($(OS), Windows_NT)
DOTEXE=.exe
else
DOTEXE=
endif

# make hello OCAMLOPT=ocamlopt "LABLGTK_FLAGS=`ocamlfind query -predicates native -a-format lablgtk2` `ocamlfind query -predicates native -i-format lablgtk2`" OCAMLCFLAGS="-ccopt -no-pie"
hello$(DOTEXE): hello.ml linemarks.cmxa
	${OCAMLOPT} ${OCAMLCFLAGS} -o hello$(DOTEXE) $(LABLGTK_FLAGS) lablgtksourceview2.cmxa linemarks.cmxa gtkInit.cmx hello.ml

linemarks.cmxa: liblinemarks.a
	${OCAMLOPT} ${OCAMLCFLAGS} -a -o linemarks.cmxa $(LABLGTK_FLAGS) GtkLineMarks.mli GtkLineMarks.ml GLineMarks.ml -cclib -L$(shell pwd) -cclib -llinemarks -cclib "`pkg-config --libs gtksourceview-2.0`"

ifeq ($(OS), Windows_NT)
  AR=x86_64-w64-mingw32-ar
else
  AR=ar
endif

liblinemarks.a: linemarks.o
	$(AR) r liblinemarks.a linemarks.o ml_GtkLineMarks.o

ifeq ($(shell uname -s), Darwin)
  # Keep Cocoa from stack-walking into OCaml frames and crashing.
  # See OCaml bug 7118 <http://caml.inria.fr/mantis/view.php?id=7118>
  # See LablGtk bug 1518 <https://forge.ocamlcore.org/tracker/index.php?func=detail&aid=1518&group_id=220&atid=1032>
  # See VeriFast bug 1975 <https://dnetcode.cs.kuleuven.be/issues/1975>
  MYCFLAGS:=-fno-unwind-tables

  # C code generated by 'valac' disregards C type qualifiers
  MYCFLAGS:=-Wno-incompatible-pointer-types-discards-qualifiers $(MYCFLAGS)
else ifeq ($(shell uname -s), Linux)
  MYCFLAGS:=-Wno-discarded-qualifiers
endif

linemarks.o: linemarks.c
	${OCAMLOPT} ${OCAMLCFLAGS} -c -ccopt "`pkg-config --cflags gtksourceview-2.0` ${MYCFLAGS}" linemarks.c ml_GtkLineMarks.c

# After modifying 'linemarks.vala', run 'make vala' to update 'linemarks.c'.
vala:
	valac --vapidir . -C -H linemarks.h --pkg gtksourceview-2.0 --pkg mystuff linemarks.vala

hello-vala: linemarks.vala hello-vala.vala
	valac -o hello-vala --vapidir . --pkg gtksourceview-2.0 --pkg mystuff linemarks.vala hello-vala.vala

vala-clean:
	rm -f linemarks.c

clean::
	rm -f *.o *.a *.cm* hello$(DOTEXE)
