mod sockets {

    struct Socket;

    //@ pred ServerSocket(socket: Socket;);
    //@ pred Socket(socket: Socket;);

    impl Socket {

        unsafe fn listen(port: u16) -> Socket;
        //@ req true;
        //@ ens ServerSocket(result);

        unsafe fn accept(self: Socket) -> Socket;
        //@ req [?q]ServerSocket(self);
        //@ ens [q]ServerSocket(self) &*& Socket(result);

        unsafe fn receive(self: Socket, buffer: *mut u8, length: usize) -> usize;
        //@ req [?q]Socket(self) &*& integers__(buffer, 1, false, length, _);
        /*@
        ens
            result <= length &*&
            [q]Socket(self) &*&
            integers_(buffer, 1, false, result, _) &*&
            integers__(buffer + result, 1, false, length - result, _);
        @*/

        unsafe fn send(self: Socket, buffer: *const u8, length: usize);
        //@ req [?f]Socket(self) &*& [?fb]integers_(buffer, 1, false, length, ?vs);
        //@ ens [f]Socket(self) &*& [fb]integers_(buffer, 1, false, length, vs);

        unsafe fn close(self: Socket);
        //@ req Socket(self);
        //@ ens true;

    }

}

